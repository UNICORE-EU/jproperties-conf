
[[logging]]
Logging
-------

UNICORE uses the Log4j logging framework. It is configured using a config file. By default, 
this file is found in components configuration directory and is named +logging.properties+. 
The config file is specified with a Java property +log4j.configuration+ (which is set in startup script).

Several libraries used by UNICORE also use the Java utils logging facility (the output is 
two-lines per log entry). For convenience its configuration is also controlled in the same 
+logging.properties+ file and is directed to the same destination as the main Log4j output. 

[NOTE]
===========
You can change the logging configuration at runtime by editing the logging.properties file.
The new configuration will take effect a few seconds after the file has been modified.
===========

By default, log files are written to the the +LOGS+ directory. 

The following example config file configures logging so that log files are 
rotated daily.

-------------------
# Set root logger level to INFO and its only appender to A1.
log4j.rootLogger=INFO, A1

# A1 is set to be a rolling file appender with default params
log4j.appender.A1=org.apache.log4j.DailyRollingFileAppender
log4j.appender.A1.File=logs/uas.log

#configure daily rollover: once per day the uas.log will be copied 
#to a file named e.g. uas.log.2008-12-24
log4j.appender.A1.DatePattern='.'yyyy-MM-dd

# A1 uses the PatternLayout
log4j.appender.A1.layout=org.apache.log4j.PatternLayout
log4j.appender.A1.layout.ConversionPattern=%d [%t] %-5p %c{1} %x - %m%n
-------------------

[NOTE]
===========
In Log4j, the log rotation frequency is controlled by the DatePattern. Check 
http://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/DailyRollingFileAppender.html
for the details.
===========

For more info on controlling the logging we refer to the log4j documentation:
  
  - http://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/PatternLayout.html[PatternLayout]
  
  - http://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/RollingFileAppender.html[RollingFileAppender]
  
  - http://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/DailyRollingFileAppender.html[DailyRollingFileAppender]
  
 
Log4j supports a very wide range of logging options, such as date based or size based file rollover,
logging different things to different files and much more. For full information on Log4j we refer to
the publicly available documentation, for example the 
http://logging.apache.org/log4j/1.2/manual.html[Log4j manual].
 

==== Logger categories, names and levels

Logger names are hierarchical. In UNICORE, prefixes are used (e.g. "unicore.security") 
to which the Java class name is appended. For example, the XUUDB connector in UNICORE/X logs to 
the "unicore.security.XUUDBAuthoriser" logger. 

Therefore the logging output produced can be controlled in a fine-grained manner. 
Log levels in Log4j are (in increasing level of severity): 

# +TRACE+ on this level _huge_ pieces of unprocessed information are dumped,
# +DEBUG+ on this level UNICORE logs (hopefully) admin-friendly, verbose information, useful for hunting problems, 
# +INFO+ standard information, not much output,
# +WARN+ warnings are logged when something went wrong (so it should be investigated), but recovery was possible,
# +ERROR+ something went wrong and operation probably failed, 
# +FATAL+ something went really wrong - this is used very rarely for critical situations like server failure.

For example, to debug a security problem in the UNICORE security layer, you can set:
  
------
log4j.logger.unicore.security=DEBUG
------

If you are just interested in details of credentials handling, but not everything related to security
you can use the following: 

------
log4j.logger.unicore.security=INFO
log4j.logger.unicore.security.CredentialProperties=DEBUG
------

so the XUUDBAuthoriser will log on DEBUG level, while the other security components
log on INFO level.  

[NOTE]
===========
The best way to discover what is the name of interesting category is to remove +{1}+ after +%c+ 
(so the full category is printed) and turn on the general DEBUG logging for a while (on unicore).
Then interesting events can be seen and subsequently the logging configuration can be fine tuned
to only show them.
===========


